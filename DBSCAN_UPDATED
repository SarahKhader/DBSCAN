# Import necessary libraries
from sklearn.datasets import load_iris
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score, adjusted_rand_score, adjusted_mutual_info_score
import matplotlib.pyplot as plt

# Load Iris dataset
iris = load_iris()
X = iris.data  # Feature matrix
true_labels = iris.target  # True labels (if available)

# Perform DBSCAN clustering
eps = 1.6 # Example epsilon value
min_samples = 30 # Example min_samples value
dbscan = DBSCAN(eps=eps, min_samples=min_samples)
predicted_labels = dbscan.fit_predict(X)

# Evaluate clustering results (I read that these are important matrices to evaluate the clustering results)
silhouette = silhouette_score(X, predicted_labels)
davies_bouldin = davies_bouldin_score(X, predicted_labels)
calinski_harabasz = calinski_harabasz_score(X, predicted_labels)
if true_labels is not None:
   adjusted_rand = adjusted_rand_score(true_labels, predicted_labels)  
else:
   adjusted_rand = None
if true_labels is not None:
   adjusted_mutual_info = adjusted_mutual_info_score(true_labels, predicted_labels) 
else:
 adjusted_mutual_info = None

# Print evaluation results
print("Evaluation Results:")
print("Silhouette Score:", silhouette)
print("Davies-Bouldin Index:", davies_bouldin)
print("Calinski-Harabasz Index:", calinski_harabasz)
if adjusted_rand is not None:
    print("Adjusted Rand Index:", adjusted_rand)
if adjusted_mutual_info is not None:
    print("Adjusted Mutual Information:", adjusted_mutual_info)

# Plot the clusters
plt.scatter(X[:, 0], X[:, 1], c=predicted_labels, cmap='viridis')
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.title('DBSCAN Clustering on Iris Dataset')
plt.show()
